// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    // "context": "Workspace",
    "bindings": {
      "ctrl-w l": "workspace::ActivateNextPane",
      "ctrl-w h": "workspace::ActivatePreviousPane",
      "ctrl-w q": "pane::CloseAllItems",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "alt-d": "pane::CloseActiveItem",
      "alt-h": "workspace::ToggleBottomDock",
      "ctrl-t": ["task::Spawn", { "task_name": "terminal" }]
    }
  },
  {
    "context": "DebugPanel",
    "bindings": {
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "multi",
    "bindings": {}
  },
  {
    "context": "Dock || !Terminal",
    "bindings": {
      "alt-o": "workspace::ToggleRightDock",
      "alt-i": "workspace::ToggleLeftDock",
      "alt-h": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "ProposedChangesEditor",
    "bindings": {
      "alt-y": "editor::ApplyDiffHunk",
      "alt-a": "editor::ApplyAllDiffHunks"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "up": "editor::ContextMenuPrevious",
      "shift-tab": "editor::ContextMenuPrevious",
      "down": "editor::ContextMenuNext",
      "tab": "editor::ContextMenuNext",
      "pageup": "editor::ContextMenuFirst",
      "pagedown": "editor::ContextMenuLast"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {}
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting",
    "bindings": {
      // "space g g": [
      //   "task::Spawn",
      //   {
      //     "task_name": "Lazygit"
      //   }
      // ],
      "space d u": "debug_panel::ToggleFocus",
      "space d c": "debugger::Continue",
      "space d s": "debugger::Start",
      "space d t": "debugger::Stop",
      "space d P": "debugger::Pause",
      "space d i": "debugger::StepInto",
      "space d o": "debugger::StepOut",
      "space d O": "debugger::StepOver",
      "space d r": "debugger::Restart",
      "space d R": "debugger::FocusConsole",
      "space d T": "debugger::FocusTerminal",
      "space d F": "debugger::FocusFrames",
      "space d M": "debugger::FocusModules",
      "space d V": "debugger::FocusVariables",
      "space d S": "debugger::FocusLoadedSources",
      "space d B": "debugger::FocusBreakpointList",
      "space t o": "task::Spawn",
      "space t r": "task::Rerun",
      "space t n": "workspace::NewTerminal",
      "space g a a": "agent::Keep",
      "space g a A": "agent::KeepAll",
      "space g a R": "agent::RejectAll",
      "space g a r": "agent::Reject",
      "space g g S": "git::StageAll",
      "space g g U": "git::UnstageAll",
      "space g g m": "git::GenerateCommitMessage",
      "space g g u": "git::UnstageFile",
      "space g g s": "git::StageAndNext",
      "space g g t": "git::ToggleStaged",
      "space g g P": "git::Push",
      "space g g p": "git::Pull",
      "space g g c": "git::Commit",
      "space g g D": "git::Diff",
      "space g g d": "editor::ToggleSelectedDiffHunks",
      "space g g b": "git::Branch",
      "space g g r": "git::Restore",
      "space g g R": "git::RestoreFile",
      "ctrl-c": "editor::Copy"
    }
  },
  {
    "context": "Picker || menu",
    "bindings": {
      "up": "menu::SelectLast",
      "shift-tab": "menu::SelectLast",
      "down": "menu::SelectNext",
      "tab": "menu::SelectNext"
    }
  },
  {
    "context": "Editor && !menu && vim_mode == insert",
    "bindings": {
      "j j": "vim::SwitchToNormalMode"
    }
  },
  {
    "context": "Editor && !menu && vim_mode == visual",
    "bindings": {
      "space c a": "editor::ToggleCodeActions",
      "space c f": "editor::Format"
    }
  },
  {
    "context": "Editor && !menu && vim_mode == normal",
    "bindings": {
      "space c a": "editor::ToggleCodeActions",
      "space c f": "editor::Format",
      "space c r": "editor::Rename",
      "alt-k": "editor::MoveLineUp",
      "alt-j": "editor::MoveLineDown",
      "space c S": "project_symbols::Toggle",
      "space c s": "outline::Toggle",
      "alt o": "workspace::ToggleRightDock",
      "alt i": "workspace::ToggleLeftDock",
      "space c d": "editor::GoToDiagnostic",
      "space s d": "diagnostics::Deploy",
      "space s g": "pane::DeploySearch",
      "space f b": "tab_switcher::ToggleAll",
      "space f f": "file_finder::Toggle",
      "space f m": "vim::ToggleMarksView",
      "*": "pane::DeploySearch",
      "-": "project_panel::ToggleFocus",
      "space g b": "git::Blame",
      "space b n": "pane::ActivateNextItem",
      "] b": "pane::ActivateNextItem",
      "space b p": "pane::ActivateLastItem",
      "[ b": "pane::ActivateLastItem",
      "space x D": "editor::GoToPreviousDiagnostic",
      "space x d": "editor::GoToDiagnostic",
      "space b d": "pane::CloseActiveItem",
      "space r t": "terminal_panel::ToggleFocus",
      "space r f": "project_panel::ToggleFocus",
      "space r o": "outline_panel::ToggleFocus",
      "space r c": "collab_panel::ToggleFocus",
      "space r g": "git_panel::ToggleFocus",
      "space r a": "agent::ToggleFocus"
      // "space e": "workspace::ToggleLeftDock",
      // "space r": "workspace::ToggleRightDock"
    }
  },
  // {
  //   "context": "vim_mode == visual",
  //   "bindings": {
  //     "shift-s": ["vim::PushAddSurrounds", {}]
  //   }
  // },
  // {
  //   "context": "Editor && (showing_code_actions || showing_completions)",
  //   "bindings": {
  //     "tab": "editor::ContextMenuNext",
  //     "shift-tab": "editor::ContextMenuPrev"
  //   }
  // },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "alt-l": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "bindings": {
      "alt-l": "editor::AcceptEditPrediction"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      "s": "vim::PushSneak",
      "shift-s": "vim::PushSneakBackward"
    }
  }
]
